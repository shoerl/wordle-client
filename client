#!/usr/bin/python3
import socket
import json
import random
import re
import argparse
import ssl

# Buffer size for recieving data (4096 seems reasonable)
BUFFER_SIZE = 4096

def main():
  # Initialize argument parser and add arguments
  parser = argparse.ArgumentParser()
  parser.add_argument("-p", required=False, dest='port',  type=int, default=argparse.SUPPRESS)
  parser.add_argument("-s", required=False, action='store_true', default=False)
  parser.add_argument("hostname", type=str)
  parser.add_argument("Northeastern-username", type=str)

  # Parse arguments
  args = parser.parse_args()
  hostname = args.hostname
  neu_username = getattr(args, "Northeastern-username")

  # If a port is specified, use that port
  if hasattr(args, 'port'):
    port = args.port
  
  # If a port is not specified but ssl is, use port 27994
  elif args.s:
    port = 27994

  # Neither a port nor ssl is specified, use port 27993
  else:
    port = 27993
 
  # Initialize socket
  client_socket = get_connected_socket(hostname, port, args.s)

  # Start game and get output
  start_game_output = start_game_and_get_output(client_socket, neu_username)
  
  if 'id' not in start_game_output:
    raise ValueError("The data we recieved does not contain a id. Something is wrong, exiting now.")

  else:
    verify_recieved_data(start_game_output, start_game_output['id'])

  # Play game
  play_game(client_socket, start_game_output['id'])

  # Close socket
  client_socket.close()


# Play game and return when we see the flag or an error
def play_game(socket, game_id):
  # Target is the word we are trying to find, we will fill in letters as we find them
  target = ['', '', '', '', '']
  
  # Excluded set (aka any letters that are not in the word)
  excluded = set()

  # Included set (aka any letters that are in word but we don't know location)
  included = set()

  # Keep a set of past guesses to ensure we don't guess the same word twice
  past_guesses = []

  # Use one of these words as a first choice in hopes that we reveal some letters
  # I got this word list from https://ftw.usatoday.com/lists/wordle-best-first-words-list
  first_guess = random.choice(["adieu", "audio", "stare", "roast", "ratio", "arise", "tears"])

  # Keep track of last guess
  past_guesses.append(first_guess)
  
  # Make guess and parse guess result
  latest_guess = make_guess_and_parse_guess_result(socket, game_id, first_guess)
  verify_recieved_data(latest_guess, game_id)
  
  # Parse the word list and store it in memory
  sorted_wordlist = open('project1-words-sorted.txt').read().splitlines()

  # Keep playing until we see the bye
  while latest_guess['type'] != "bye":
    # Update our arrays/metadata using the output of last guess
    update_metadata_from_guess(latest_guess['guesses'][-1], target, excluded, included)
    # Build regex to find next guess
    regex = get_regex_from_guess_and_excluded(target, excluded)
    # Search for next guess
    guessed_word = get_next_guess(sorted_wordlist, regex, past_guesses)
    # Append last guess to ensure we don't guess it again
    past_guesses.append(guessed_word)
    # Parse output 
    latest_guess = make_guess_and_parse_guess_result(socket, game_id, guessed_word)
    verify_recieved_data(latest_guess, game_id)

  # If we got here we successfully beat the game and have a flag, so print it
  print(latest_guess['flag'])


# Verify the recieved data we get and raise an error if something is wrong
def verify_recieved_data(data, game_id):
  if 'id' not in data:
    raise ValueError("The data we recieved does not contain a id. Something is wrong, exiting now.")

  elif data['id'] != game_id:
    raise ValueError("The game id has changed, something is wrong. Exiting now.")

  elif 'type' not in data:
    raise ValueError("The data does not have a type, something is wrong. Exiting now.")

  elif data['type'] == 'error':
    raise Exception("There was an error: {}".format(message))

  elif data['type'] == 'retry' and 'guesses' not in data:
    raise ValueError("The data we recieved should have a word. Exiting now.")

  elif data['type'] == 'bye' and 'flag' not in data:
    raise ValueError("A bye message was recieved without a flag, exiting now.")

  # if we get here and the type isnt start, then it is a type we have never seen
  elif data['type'] not in ['retry', 'bye', 'start']:
    raise Exception("Recieved an unknown type of message. Exiting now.")

# Use regex to find our next guess
def get_next_guess(sorted_wordlist, regex, past_guesses):
  for word in sorted_wordlist:
    # If word matches our regex and we haven't guessed it yet,
    # then that is our next guess
    if re.search(regex, word) != None and word not in past_guesses:
      return word

# Update our metadata arrays from our last guess
def update_metadata_from_guess(guess, target, excluded, included):
  for idx, element in enumerate(guess['marks']):
    if element == 2:
      target[idx] = guess['word'][idx]

    elif element == 1:
      # Add word to included set
      included.add(guess['word'][idx])

    elif element == 0:
      # If word is excluded but we have already seen it in our included set, don't add it
      if guess['word'][idx] not in included:
        excluded.add(guess['word'][idx])

  return

# Build regex to search for next guess
def get_regex_from_guess_and_excluded(target, excluded):
  regex = ""
  for element in target:
    # If we have nothing to exclude, than it could be any letter
    if element == '' and len(excluded) == 0:
      regex = "\w"
    # Build regex that ignores all excluded letters
    elif element == '':
      regex += "[^" + ''.join(map(str, excluded)) + "]"
    # If we know what the letter is, than just add it to the regex
    else:
      regex += element
  return regex


# Make guess and parse guess results
def make_guess_and_parse_guess_result(client_socket, game_id, guess):
  # Build json message and encode it
  msg = json.dumps({"type": "guess", "id": game_id, "word": guess}) + "\n"
  msg_bytes = msg.encode()
  # Use client socket to send message
  client_socket.send(msg_bytes)
  # Recieve data back from server and parse it into a json
  data = client_socket.recv(BUFFER_SIZE)
  return json.loads(data.decode())

# Accepts a client socket and username and starts the game and returns server output
def start_game_and_get_output(client_socket, username):
  # Build json message and encode it
  outgoing_msg = json.dumps({"type": "hello", "northeastern_username": username}) + "\n"
  outgoing_msg_bytes = outgoing_msg.encode()
  # Use client socket to send message
  client_socket.send(outgoing_msg_bytes)
  # Recieve data back from server and parse it into a json, and then return the game id
  # as that is the only thing we need at this point
  data = client_socket.recv(BUFFER_SIZE)
  return json.loads(data.decode())

# Accepts a ip and port and bool representing whether to use TLS 
# and returns a connected socket object
def get_connected_socket(ip, port, tls):
  # Learned how to do this from https://docs.python.org/3/howto/sockets.html
  client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  
  # if tls than wrap socket
  # Learned how to do this from https://docs.python.org/3/library/ssl.html#module-ssl
  if tls:
    context = ssl.create_default_context()
    client_socket = context.wrap_socket(client_socket, server_hostname=ip)
  
  client_socket.connect((ip, port))
  return client_socket

if __name__ == "__main__":
  main()
